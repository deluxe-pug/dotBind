{
  "_args": [
    [
      "any-db@~2.1.0",
      "/Users/xiaoyuhe/.nvm/versions/node/v5.10.1/lib/node_modules/nodal"
    ]
  ],
  "_from": "any-db@>=2.1.0 <2.2.0",
  "_id": "any-db@2.1.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/nodal/any-db",
  "_npmUser": {
    "email": "glurgle@gmail.com",
    "name": "grncdr"
  },
  "_npmVersion": "1.3.11",
  "_phantomChildren": {
    "generic-pool": "2.0.4",
    "once": "1.1.1"
  },
  "_requested": {
    "name": "any-db",
    "raw": "any-db@~2.1.0",
    "rawSpec": "~2.1.0",
    "scope": null,
    "spec": ">=2.1.0 <2.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/nodal"
  ],
  "_resolved": "https://registry.npmjs.org/any-db/-/any-db-2.1.0.tgz",
  "_shasum": "a841365816f50f3da5fdf1ba08c4d4f00c9a639f",
  "_shrinkwrap": null,
  "_spec": "any-db@~2.1.0",
  "_where": "/Users/xiaoyuhe/.nvm/versions/node/v5.10.1/lib/node_modules/nodal",
  "author": {
    "name": "Stephen Sugden"
  },
  "bugs": {
    "url": "https://github.com/grncdr/node-any-db/issues"
  },
  "dependencies": {
    "any-db-pool": "~2.0.1",
    "parse-db-url": "0.0.0"
  },
  "description": "Database-agnostic connection pooling, querying, and result sets",
  "devDependencies": {
    "any-db-fake": "0.0.1",
    "tape": "~2.3.2"
  },
  "directories": {},
  "dist": {
    "shasum": "a841365816f50f3da5fdf1ba08c4d4f00c9a639f",
    "tarball": "https://registry.npmjs.org/any-db/-/any-db-2.1.0.tgz"
  },
  "homepage": "https://github.com/grncdr/node-any-db#readme",
  "keywords": [
    "mysql",
    "postgres",
    "pg",
    "sqlite",
    "sqlite3"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "email": "glurgle@gmail.com",
      "name": "grncdr"
    }
  ],
  "name": "any-db",
  "optionalDependencies": {},
  "readme": "# Any-DB\n\n[![Build Status](https://secure.travis-ci.org/grncdr/node-any-db.png?branch=master)](http://travis-ci.org/grncdr/node-any-db)\n\n_The less-opinionated Node.js database abstraction layer_\n\n## Synopsis\n\n```ocaml\nmodule.exports := {\n  createConnection: (Url, Continuation<Connection>?) => Connection\n  createPool: (Url, PoolConfig) => ConnectionPool\n}\n\nUrl := String | { adapter: String }\n\nPoolConfig := {\n  min: Number,\n  max: Number,\n  onConnect: (Connection, ((Error) => void) => void\n  reset: (Connection, ((Error) => void) => void\n}\n```\n\nEstablish a connection:\n\n```javascript\n// Takes an optional callback\nvar conn = anyDB.createConnection('driver://user:pass@hostname/database')\n```\n\nMake queries:\n\n```javascript\nvar sql = 'SELECT * FROM my_table'\nconn.query(sql).on('row', function (row) {})  // evented\nconn.query(sql, function (error, result) {})  // or callback\n\nUse bound parameters:\n\nsql += ' WHERE my_column = ?'\nconn.query(sql, [42]).on('row', ...)           // again, evented\nconn.query(sql, [42], function (err, res) {})  // or callback\n```\n\nClose a connection:\n\n    conn.end()\n    \nStart a transaction:\n\n    var tx = conn.begin()             // Can also take a callback\n    tx.on('error', function (err) {}) // Emitted for unhandled query errors\n    tx.query(...)                     // same interface as connections, plus...\n    tx.commit()                       // takes an optional callback for errors\n    tx.rollback()                     // this too\n    \nCreate a connection pool that maintains 2-20 connections\n\n    var pool = anyDB.createPool(dbURL, {min: 2, max: 20})\n    \n    pool.query(...)       // perform a single query, same API as connection\n    var tx = pool.begin() // start a transaction, again, same API as connection\n    pool.close()          // close the pool (call when your app should exit)\n\n## Description\n\nThe purpose of this library is to provide a consistent API for the commonly used\nfunctionality of SQL database drivers, while avoiding altering driver behaviour\nas much as possible.\n\n## Installation\n\n### For Applications\n\n   npm install --save any-db-{postgres,mysql,sqlite3}\n\nAll of the adapter libraries have `any-db` as a *peerDependency*, which means\nthat `require('any-db')` will work even though you don't install it directly or\nadd it to your package.json.\n\n### For Libraries\n\nAdd `any-db` to `peerDependencies` in package.json. This allows users of your\nlibrary to satisfy the any-db dependency by installing the adapter of their\nchoice.\n\n## API\n\nThe API of [Connection][] and [Query][] objects is fully described in the\n[adapter-spec][], while [Transaction][] and [ConnectionPool][] objects have\ntheir own documentation. Connections, transactions and pools all have a `query`\nmethod that behaves consistently between drivers.\n\nBoth exported functions require an `Url` as their first parameter. This can\neither be a string of the form `adapter://user:password@host/database` (which\nwill be parsed by [parse-db-url][]) or an object. When an object is used, it\n**must** have an `adapter` property, and any other properties required by the\nspecified adapters [createConnection][] method.\n\nSee also: README notes for your chosen adapter\n([MySQL](https://github.com/grncdr/node-any-db-mysql),\n [Postgres](https://github.com/grncdr/node-any-db-postgres), and\n [SQLite3](https://github.com/grncdr/node-any-db-sqlite3))\n\n## License\n\nMIT\n\n[createConnection]: https://github.com/grncdr/node-any-db-adapter-spec#adapter-createconnection\n[ConnectionPool]: https://github.com/grncdr/node-any-db-pool#api\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/grncdr/node-any-db.git"
  },
  "scripts": {
    "test": "node test.js"
  },
  "version": "2.1.0"
}
